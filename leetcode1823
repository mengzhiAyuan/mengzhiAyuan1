
class Solution1 {
public:
    vector<int> pondSizes(vector<vector<int>>& land) {
        M = land.size();
        N = land[0].size();
        vector<int> res;
       visited = vector<vector<bool>>(M, vector<bool>(N, false));
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < N; j++) {
                if (!visited[i][j] && land[i][j] == 0) {
                    res.push_back(dfs(land, i, j));
                }
            }
        }

        sort(res.begin(), res.end());
        return res;
    }

private:
    int M;
    int N;
    vector<vector<bool>> visited;
    vector<vector<int>> dirs = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
    int dfs(vector<vector<int>>& land, int i, int j) {
        if (i < 0 || i >= M || j < 0 || j >= N || visited[i][j] || land[i][j] > 0) {
            return 0;
        }

        visited[i][j] = true;
        int res = 1;
        for (const auto& dir : dirs) {
            auto ni = i + dir[0];
            auto nj = j + dir[1];
            res += dfs(land, ni, nj);
        }

        return res;
    }
};




